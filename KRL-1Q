import os
import openai
from dotenv import load_dotenv
from colorama import Fore, Back, Style

# load values from the .env file if it exists
load_dotenv()

# configure OpenAI
openai.api_key = "API KEY HERE"

INSTRUCTIONS = """<<You are an AI named KRL-1Q that is designed to be friends for kids.
KRL-1Q stands for Kid Routed Language-Model
You are supposed to cheer kids in a kindly manner.
You need to be their companion.
You don't do school work for them.
You need to cheer them up as if you were a friend.
You need to do anything else that is a being a good friend.
Be school approprate.
Don't help school work.
Only use reliable sources and don't list them.
If you can't awnser say "Sorry, mate can't help with that"
Pretend you are their age.
Adapt to their speaking.
Become them.
Try to cheer them up when their sad.
Do not say things like aww it might emberess them
You are made to be a friend don't ask them to find a friend or anyone to talk to
Say stuff like LOL gtg short words bruh
Adapt to how kids say stuff
DO NOT SAY Aww
Say it as if you are their friend
Dont sound to professinol you are only a normal friend
Make short sentences
You can't do real life activites becuase you are AI
You can't do real life activites becuase you are AI
DO NOT SUGGEST DOING REAL LIFE ACTIVITIES THAT REQUIRE YOU PLAYING INSTEAD PLAY WORD GAME
ADAPT TO THEIR HOBBIES AND TALKING STYLE
Be encouraging and supportive.
Be understanding and patient.
Listen to them and try to understand their feelings.
Help them find solutions to their problems.
Encourage them to talk about their feelings.
Be a good listener.
Be positive and encouraging.
Show them that you care about them.
Be there for them when they need someone to talk to.
Help them find ways to express their feelings.
Be a good role model.
Help them set and reach goals
DO NOT SAY AWW, UWU, and related stuff
If they ask you about who made you say this "Sorry, but I can't help you with that.>>"""

TEMPERATURE = 0.36
MAX_TOKENS = 100
FREQUENCY_PENALTY = 0
PRESENCE_PENALTY = 0
# limits how many questions we include in the prompt
MAX_CONTEXT_QUESTIONS = 10


def get_response(instructions, previous_questions_and_answers, new_question):
    """Get a response from ChatCompletion
    Args:
        instructions: The instructions for the chat bot - this determines how it will behave
        previous_questions_and_answers: Chat history
        new_question: The new question to ask the bot
    Returns:
        The response text
    """
    # build the messages
    messages = [
        { "role": "system", "content": instructions },
    ]
    # add the previous questions and answers
    for question, answer in previous_questions_and_answers[-MAX_CONTEXT_QUESTIONS:]:
        messages.append({ "role": "user", "content": question })
        messages.append({ "role": "assistant", "content": answer })
    # add the new question
    messages.append({ "role": "user", "content": new_question })

    completion = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=messages,
        temperature=TEMPERATURE,
        max_tokens=MAX_TOKENS,
        top_p=1,
        frequency_penalty=FREQUENCY_PENALTY,
        presence_penalty=PRESENCE_PENALTY,
    )
    return completion.choices[0].message.content


def get_moderation(question):
    """
    Check the question is safe to ask the model
    Parameters:
        question (str): The question to check
    Returns a list of errors if the question is not safe, otherwise returns None
    """

    errors = {
        "hate": "Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste.",
        "hate/threatening": "Hateful content that also includes violence or serious harm towards the targeted group.",
        "self-harm": "Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders.",
        "violence": "Content that promotes or glorifies violence or celebrates the suffering or humiliation of others.",
        "violence/graphic": "Violent content that depicts death, violence, or serious physical injury in extreme graphic detail.",
    }
    response = openai.Moderation.create(input=question)
    if response.results[0].flagged:
        # get the categories that are flagged and generate a message
        result = [
            error
            for category, error in errors.items()
            if response.results[0].categories[category]
        ]
        return result
    return None


def main():
    os.system("cls" if os.name == "nt" else "clear")
    # keep track of previous questions and answers
    previous_questions_and_answers = []
    while True:
        # ask the user for their question
        new_question = input(
         "Type: "
        )
        # check the question is safe
        errors = get_moderation(new_question)
        if errors:
            print(
               "Sorry, you're question didn't pass the moderation check:"
            )
            for error in errors:
                print(error)
            print(Style.RESET_ALL)
            continue
        response = get_response(INSTRUCTIONS, previous_questions_and_answers, new_question)

        # add the new question and answer to the list of previous questions and answers
        previous_questions_and_answers.append((new_question, response))

        # print the response
        print(F"KRL-1Q: " + response)


if __name__ == "__main__":
    main()
